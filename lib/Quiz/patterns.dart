const consonantNum = 19;
const vowelNum = 21;
const answerDistance = 4;

List<Pattern> consonant = [
  r'(^[가-깋])',
  r'(^[까-낗])',
  r'(^[나-닣])',
  r'(^[다-딯])',
  r'(^[따-띻])',
  r'(^[라-맇])',
  r'(^[마-밓])',
  r'(^[바-빟])',
  r'(^[빠-삫])',
  r'(^[사-싷])',
  r'(^[싸-앃])',
  r'(^[아-잏])',
  r'(^[자-짖])',
  r'(^[짜-찧])',
  r'(^[차-칳])',
  r'(^[카-킿])',
  r'(^[타-팋])',
  r'(^[파-핗])',
  r'(^[하-힣])',
]; //19개

List<String> consonant_map = [
  'ㄱ',
  'ㄲ',
  'ㄴ',
  'ㄷ',
  'ㄸ',
  'ㄹ',
  'ㅁ',
  'ㅂ',
  'ㅃ',
  'ㅅ',
  'ㅆ',
  'ㅇ',
  'ㅈ',
  'ㅉ',
  'ㅊ',
  'ㅋ',
  'ㅌ',
  'ㅍ',
  'ㅎ',
];

List<Pattern> vowel = [
  r'(^[가-갛|까-깧|나-낳|다-닿|따-땋|라-랗|마-맣|바-밯|빠-빻|사-샇|싸-쌓|아-앟|자-잫|짜-짷|차-챃|카-캏|타-탛|파-팧|하-핳])',
  r'(^[개-갷|깨-꺃|내-냏|대-댛|때-땧|래-랳|매-맿|배-뱋|빼-뺗|새-샣|쌔-쌯|애-앻|재-쟇|째-쨓|채-챟|캐-캫|태-탷|패-퍃|해-햏])',
  r'(^[갸-걓|꺄-꺟|냐-냫|댜-댷|땨-떃|랴-럏|먀-먛|뱌-뱧|뺘-뺳|샤-샿|쌰-썋|야-얗|쟈-쟣|쨔-쨯|챠-챻|캬-컇|탸-턓|퍄-퍟|햐-햫])',
  r'(^[걔-걯|꺠-꺻|냬-넇|댸-덓|떄-떟|럐-럫|먜-먷|뱨-벃|뺴-뻏|섀-섛|썌-썧|얘-얳|쟤-쟿|쨰-쩋|챼-첗|컈-컣|턔-턯|퍠-퍻|햬-헇])',
  r'(^[거-겋|꺼-껗|너-넣|더-덯|떠-떻|러-렇|머-멓|버-벟|뻐-뻫|서-섷|써-쎃|어-엏|저-젛|쩌-쩧|처-첳|커-컿|터-텋|퍼-펗|허-헣])',
  r'(^[게-겧|께-껳|네-넿|데-뎋|떼-뗗|레-렣|메-멯|베-벻|뻬-뼇|세-셓|쎄-쎟|에-엫|제-젷|쩨-쪃|체-쳏|케-켛|테-텧|페-펳|헤-헿])',
  r'(^[겨-곃|껴-꼏|녀-녛|뎌-뎧|뗘-뗳|려-렿|며-몋|벼-볗|뼈-뼣|셔-셯|쎠-쎻|여-옇|져-졓|쪄-쪟|쳐-쳫|켜-켷|텨-톃|펴-폏|혀-혛])',
  r'(^[계-곟|꼐-꼫|녜-녷|뎨-돃|뗴-똏|례-롛|몌-몧|볘-볳|뼤-뼿|셰-솋|쎼-쏗|예-옣|졔-졯|쪠-쪻|쳬-촇|켸-콓|톄-톟|폐-폫|혜-혷])',
  r'(^[고-곻|꼬-꽇|노-놓|도-돟|또-똫|로-롷|모-뫃|보-봏|뽀-뽛|소-솧|쏘-쏳|오-옿|조-좋|쪼-쫗|초-촣|코-콯|토-톻|포-퐇|호-홓])',
  r'(^[과-괗|꽈-꽣|놔-놯|돠-돻|똬-뙇|롸-뢓|뫄-뫟|봐-봫|뽜-뽷|솨-쇃|쏴-쐏|와-왛|좌-좧|쫘-쫳|촤-촿|콰-쾋|톼-퇗|퐈-퐣|화-홯])',
  r'(^[괘-괳|꽤-꽿|놰-뇋|돼-됗|뙈-뙣|뢔-뢯|뫠-뫻|봬-뵇|뽸-뾓|쇄-쇟|쐐-쐫|왜-왷|좨-죃|쫴-쬏|쵀-쵛|쾌-쾧|퇘-퇳|퐤-퐿|홰-횋])',
  r'(^[괴-굏|꾀-꾛|뇌-뇧|되-됳|뙤-뙿|뢰-룋|뫼-묗|뵈-뵣|뾔-뾯|쇠-쇻|쐬-쑇|외-욓|죄-죟|쬐-쬫|최-쵷|쾨-쿃|퇴-툏|푀-푛|회-횧])',
  r'(^[교-굫|꾜-꾷|뇨-눃|됴-둏|뚀-뚛|료-룧|묘-묳|뵤-뵿|뾰-뿋|쇼-숗|쑈-쑣|요-욯|죠-죻|쬬-쭇|쵸-춓|쿄-쿟|툐-툫|표-푷|효-훃])',
  r'(^[구-궇|꾸-꿓|누-눟|두-둫|뚜-뚷|루-뤃|무-뭏|부-붛|뿌-뿧|수-숳|쑤-쑿|우-웋|주-줗|쭈-쭣|추-춯|쿠-쿻|투-퉇|푸-풓|후-훟])',
  r'(^[궈-궣|꿔-꿯|눠-눻|둬-뒇|뚸-뛓|뤄-뤟|뭐-뭫|붜-붷|뿨-쀃|숴-쉏|쒀-쒛|워-웧|줘-줳|쭤-쭿|춰-췋|쿼-퀗|퉈-퉣|풔-풯|훠-훻])',
  r'(^[궤-궿|꿰-뀋|눼-뉗|뒈-뒣|뛔-뛯|뤠-뤻|뭬-뮇|붸-뷓|쀄-쀟|쉐-쉫|쒜-쒷|웨-윃|줴-쥏|쮀-쮛|췌-췧|퀘-퀳|퉤-퉿|풰-퓋|훼-휗])',
  r'(^[귀-귛|뀌-뀧|뉘-뉳|뒤-뒿|뛰-뜋|뤼-륗|뮈-뮣|뷔-뷯|쀠-쀻|쉬-슇|쒸-쓓|위-윟|쥐-쥫|쮜-쮷|취-츃|퀴-큏|튀-튛|퓌-퓧|휘-휳])',
  r'(^[규-귷|뀨-끃|뉴-늏|듀-듛|뜌-뜧|류-륳|뮤-뮿|뷰-븋|쀼-쁗|슈-슣|쓔-쓯|유-윻|쥬-즇|쮸-쯓|츄-츟|큐-큫|튜-튷|퓨-픃|휴-흏])',
  r'(^[그-긓|끄-끟|느-늫|드-듷|뜨-띃|르-릏|므-믛|브-븧|쁘-쁳|스-슿|쓰-씋|으-읗|즈-즣|쯔-쯯|츠-츻|크-킇|트-틓|프-픟|흐-흫])',
  r'(^[긔-긯|끠-끻|늬-닇|듸-딓|띄-띟|릐-릫|믜-믷|븨-빃|쁴-삏|싀-싛|씌-씧|의-읳|즤-즿|쯰-찋|츼-칗|킈-킣|틔-틯|픠-픻|희-힇])',
  r'(^[기-깋|끼-낗|니-닣|디-딯|띠-띻|리-맇|미-밓|비-빟|삐-삫|시-싷|씨-앃|이-잏|지-짛|찌-찧|치-칳|키-킿|티-팋|피-핗|히-힣])',
];

List<String> vowel_map = [
  'ㅏ',
  'ㅐ',
  'ㅑ',
  'ㅒ',
  'ㅓ',
  'ㅔ',
  'ㅕ',
  'ㅖ',
  'ㅗ',
  'ㅘ',
  'ㅙ',
  'ㅚ',
  'ㅛ',
  'ㅜ',
  'ㅝ',
  'ㅞ',
  'ㅟ',
  'ㅠ',
  'ㅡ',
  'ㅢ',
  'ㅣ',
];

int getDistance(String s1, String s2) {
  s1 = seperateWord(s1);
  s2 = seperateWord(s2);
  int len1 = s1.length;
  int len2 = s2.length;
  int subCost;
  var min;
  var cost = List.generate(len1, (index) => List(len2)); //row= s1, col= s2

  if (len1 == 1 && len2 == 1) {
    //한글자인 경우
    if (s1 == s2)
      return 0;
    else
      return answerDistance;
  }

  //cost 배열 초기화
  cost[0][0] = s1[0] == s2[0] ? 0 : 1;
  for (int c = 1; c < len2; c++) {
    cost[0][c] = cost[0][c - 1] + 1;
  }
  for (int r = 1; r < len1; r++) {
    cost[r][0] = cost[r - 1][0] + 1;
  }

  //dp
  for (int r = 1; r < len1; r++) {
    for (int c = 1; c < len2; c++) {
      subCost = s1[r] == s2[c] ? 0 : 1;
      min = [
        cost[r - 1][c] + 1, //delete cost
        cost[r][c - 1] + 1, //insert cost
        cost[r - 1][c - 1] + subCost //subtitue cost
      ];
      min.sort();
      cost[r][c] = min.first;
    }
  }

  return cost[len1 - 1][len2 - 1];
}

String seperateWord(String text) {
  text = text.replaceAll(" ", "");
  int len = text.length;
  Pattern pattern;
  RegExp exp;
  String result = "";

  for (int i = 0; i < len; i++) {
    //자음 확인
    for (int j = 0; j < consonantNum; j++) {
      pattern = consonant[j];
      exp = new RegExp(pattern);
      if (exp.hasMatch(text[i])) {
        result += consonant_map[j];
        break;
      }
    }

    //모음 확인
    for (int j = 0; j < vowelNum; j++) {
      pattern = vowel[j];
      exp = new RegExp(pattern);
      if (exp.hasMatch(text[i])) {
        result += vowel_map[j];
        break;
      }
    }

    //알파벳 확인
    pattern = r'(^[a-zA-Z])';
    exp = new RegExp(pattern);
    if (exp.hasMatch(text[i])) {
      result += text[i];
    }
  }
  return result;
}
